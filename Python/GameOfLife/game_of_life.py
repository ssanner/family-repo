# -*- coding: utf-8 -*-
"""game of life.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVELiqUenGTzPG1z-H_Sp_nBukzRi7rB
"""

import numpy as np

def life_step_1(X):
    """Game of life step using generator expressions"""
    nbrs_count = sum(np.roll(np.roll(X, i, 0), j, 1)
                     for i in (-1, 0, 1) for j in (-1, 0, 1)
                     if (i != 0 or j != 0))
    return (nbrs_count == 3) | (X & (nbrs_count == 2))

def life_step_2(X):
    """Game of life step using scipy tools"""
    from scipy.signal import convolve2d
    nbrs_count = convolve2d(X, np.ones((3, 3)), mode='same', boundary='wrap') - X
    return (nbrs_count == 3) | (X & (nbrs_count == 2))
    
life_step = life_step_1

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

#!pip install JSAnimation

# JSAnimation import available at https://github.com/jakevdp/JSAnimation
#from JSAnimation.IPython_display import display_animation, anim_to_html
import matplotlib.pyplot as plt    
from matplotlib import animation
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

def life_animation(X, dpi=10, frames=10, interval=300, mode='loop'):
    """Produce a Game of Life Animation
    
    Parameters
    ----------
    X : array_like
        a two-dimensional numpy array showing the game board
    dpi : integer
        the number of dots per inch in the resulting animation.
        This controls the size of the game board on the screen
    frames : integer
        The number of frames to compute for the animation
    interval : float
        The time interval (in milliseconds) between frames
    mode : string
        The default mode of the animation.  Options are ['loop'|'once'|'reflect']
    """
    X = np.asarray(X)
    assert X.ndim == 2
    X = X.astype(bool)
    
    X_blank = np.zeros_like(X)
    figsize = (X.shape[1] * 1. / dpi, X.shape[0] * 1. / dpi)

    fig = plt.figure(figsize=figsize, dpi=dpi)
    fig.set_size_inches(18.5, 10.5)
    ax = fig.add_axes([0, 0, 1, 1], xticks=[], yticks=[], frameon=False)
    im = ax.imshow(X, cmap=plt.cm.binary, interpolation='nearest')
    im.set_clim(-0.05, 1)  # Make background gray

    # initialization function: plot the background of each frame
    def init():
        im.set_data(X_blank)
        return (im,)

    # animation function.  This is called sequentially
    def animate(i):
        im.set_data(animate.X)
        animate.X = life_step(animate.X)
        return (im,)
    animate.X = X

    anim = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=frames, interval=interval)
    
    #print anim_to_html(anim)
    #return display_animation(anim, default_mode=mode)
    anim.save('basic_animation.mp4', fps=10, extra_args=['-vcodec', 'libx264'])
    return HTML(anim.to_html5_video())

# http://jakevdp.github.io/blog/2013/08/07/conways-game-of-life/
np.random.seed(0)
#X = np.zeros((30, 40), dtype=bool)
X = np.zeros((100, 100))
#X[1:4, 1:4] = [[0, 0, 1],
#               [1, 0, 1],
#               [0, 1, 1]]
#X[48:51, 48:51] = [[0, 1, 1],
#                   [1, 1, 0],
#                   [0, 1, 0]]
X[48:51, 48:55] = [[0, 1, 0, 0, 0, 0, 0],
                   [0, 0, 0, 1, 0, 0, 0],
                   [1, 1, 0, 0, 1, 1, 1]]
#X = [[0, 0, 0, 0, 0],
#     [0, 0, 1, 0, 0],
#     [0, 0, 1, 0, 0],
#     [0, 0, 1, 0, 0],
#     [0, 0, 0, 0, 0]]
X = np.array(X)
#X.shape
#r = np.random.random((10, 20))
#X[10:20, 10:30] = (r > 0.75)
life_animation(X, dpi=50, frames=1000, mode='once', interval=20)

plt.show()

#!pip uninstall JSAnimation
#!pip uninstall matplotlib -y

#!pip install matplotlib==1.3.0
#pip install JSAnimation

#pip install matplotlib

